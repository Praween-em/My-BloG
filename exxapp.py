from flask import Flask, render_template, Response
import cv2
from deepface import DeepFace

app = Flask(__name__)

# Function to capture video stream and perform face detection
def detect_faces():
    # Open the video stream
    cap = cv2.VideoCapture(0)

    # Check if the video stream is opened successfully
    if not cap.isOpened():
        print("Error: Unable to open video stream.")
        return
    
    # Loop to capture frames from the video stream
    while True:
        # Capture frame-by-frame
        ret, frame = cap.read()

        # If frame is read correctly, ret is True
        if ret:
            # Extract faces from the frame
            faces = DeepFace.extract_faces(frame)

            # Draw rectangles around detected faces
            for face in faces:
                if 'region' in face:
                    (x, y, w, h) = (face['region']['x'], face['region']['y'], face['region']['w'], face['region']['h'])
                    cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)

            # Encode frame as JPEG image
            ret, jpeg = cv2.imencode('.jpg', frame)

            # Yield the encoded frame as byte data
            yield (b'--frame\r\n'
                    b'Content-Type: image/jpeg\r\n\r\n' + jpeg.tobytes() + b'\r\n')

        else:
            break

    # Release the video stream
    cap.release()

# Route for the live video feed
@app.route('/video_feed')
def video_feed():
    # Return the response generated by the detect_faces function
    return Response(detect_faces(), mimetype='multipart/x-mixed-replace; boundary=frame')

# Route for the index page
@app.route('/')
def index():
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
